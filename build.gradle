plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"
    id 'application'
}


group 'com.jetbrains.handson'
version '1.0-SNAPSHOT'

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://kotlin.bintray.com/kotlinx"
    }
}

dependencies {
    implementation "io.ktor:ktor-server-core:$ktor_version" //adds Ktor's core components to our project.
    //https://netty.io/
    implementation "io.ktor:ktor-server-netty:$ktor_version" //adds the Netty engine to our project, allowing us to use server functionality without having to rely on an external application container.
    //http://www.slf4j.org/
    implementation "ch.qos.logback:logback-classic:$logback_version" //provides an implementation of SLF4J, allowing us to see nicely formatted logs in our console.
    implementation "io.ktor:ktor-serialization:$ktor_version" //provides a convenient mechanism for converting Kotlin object into a serialized form like JSON, and vice versa. We will use it to format our APIs output, and to consume user input that is structured in JSON. In order to use ktor-serialization, we also need the kotlinx-serialization-runtime-common dependency, and have to apply the org.jetbrains.kotlin.plugin.serialization plugin.
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$kotlin_serialization"

    testImplementation "io.ktor:ktor-server-tests:$ktor_version" //allows us to test parts of our Ktor application without having to use the whole HTTP stack in the process. We will use this to define unit tests for our project.
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

application {
    mainClassName = 'com.jetbrains.handson.httpapi.ApplicationKt'
}